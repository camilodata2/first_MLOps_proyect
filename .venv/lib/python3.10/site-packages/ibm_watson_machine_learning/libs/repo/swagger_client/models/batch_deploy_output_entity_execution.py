# coding: utf-8

#  -----------------------------------------------------------------------------------------
#  (C) Copyright IBM Corp. 2017- 2023.
#  https://opensource.org/licenses/BSD-3-Clause
#  -----------------------------------------------------------------------------------------

from pprint import pformat
from six import iteritems
import re


class BatchDeployOutputEntityExecution(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, status=None, log_file=None, queue_date_time=None, start_date_time=None):
        """
        BatchDeployOutputEntityExecution - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'status': 'str',
            'log_file': 'str',
            'queue_date_time': 'datetime',
            'start_date_time': 'datetime'
        }

        self.attribute_map = {
            'status': 'status',
            'log_file': 'logFile',
            'queue_date_time': 'queueDateTime',
            'start_date_time': 'startDateTime'
        }

        self._status = status
        self._log_file = log_file
        self._queue_date_time = queue_date_time
        self._start_date_time = start_date_time

    @property
    def status(self):
        """
        Gets the status of this BatchDeployOutputEntityExecution.


        :return: The status of this BatchDeployOutputEntityExecution.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this BatchDeployOutputEntityExecution.


        :param status: The status of this BatchDeployOutputEntityExecution.
        :type: str
        """
        allowed_values = ["SUBMITTED", "RUNNING", "COMPLETED", "ERROR", "CANCELED", "STARTING", "BUSY", "IDLE", "KERNEL_DEAD"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def log_file(self):
        """
        Gets the log_file of this BatchDeployOutputEntityExecution.
        Execution Log Information

        :return: The log_file of this BatchDeployOutputEntityExecution.
        :rtype: str
        """
        return self._log_file

    @log_file.setter
    def log_file(self, log_file):
        """
        Sets the log_file of this BatchDeployOutputEntityExecution.
        Execution Log Information

        :param log_file: The log_file of this BatchDeployOutputEntityExecution.
        :type: str
        """

        self._log_file = log_file

    @property
    def queue_date_time(self):
        """
        Gets the queue_date_time of this BatchDeployOutputEntityExecution.
        Timestamp of the job as soon as it is queued

        :return: The queue_date_time of this BatchDeployOutputEntityExecution.
        :rtype: datetime
        """
        return self._queue_date_time

    @queue_date_time.setter
    def queue_date_time(self, queue_date_time):
        """
        Sets the queue_date_time of this BatchDeployOutputEntityExecution.
        Timestamp of the job as soon as it is queued

        :param queue_date_time: The queue_date_time of this BatchDeployOutputEntityExecution.
        :type: datetime
        """

        self._queue_date_time = queue_date_time

    @property
    def start_date_time(self):
        """
        Gets the start_date_time of this BatchDeployOutputEntityExecution.
        Timestamp of the job as soon as it starts

        :return: The start_date_time of this BatchDeployOutputEntityExecution.
        :rtype: datetime
        """
        return self._start_date_time

    @start_date_time.setter
    def start_date_time(self, start_date_time):
        """
        Sets the start_date_time of this BatchDeployOutputEntityExecution.
        Timestamp of the job as soon as it starts

        :param start_date_time: The start_date_time of this BatchDeployOutputEntityExecution.
        :type: datetime
        """

        self._start_date_time = start_date_time

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
