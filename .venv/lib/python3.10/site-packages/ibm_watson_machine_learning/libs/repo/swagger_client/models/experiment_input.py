# coding: utf-8

#  -----------------------------------------------------------------------------------------
#  (C) Copyright IBM Corp. 2018- 2023.
#  https://opensource.org/licenses/BSD-3-Clause
#  -----------------------------------------------------------------------------------------

from pprint import pformat
from six import iteritems
import re


class ExperimentInput(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, tags=None, settings=None, training_references=None, training_data_reference=None, training_results_reference=None):
        """
        ExperimentInputExperiments - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'tags': 'list[TagRepository]',
            'settings': 'ExperimentInputSettings',
            'training_references': 'list[TrainingReferenceExperiments]',
            'training_data_reference': 'ConnectionObjectSourceExperiments',
            'training_results_reference': 'ConnectionObjectTargetExperiments'
        }

        self.attribute_map = {
            'tags': 'tags',
            'settings': 'settings',
            'training_references': 'training_references',
            'training_data_reference': 'training_data_reference',
            'training_results_reference': 'training_results_reference'
        }

        self._tags = tags
        self._settings = settings
        self._training_references = training_references
        self._training_data_reference = training_data_reference
        self._training_results_reference = training_results_reference

    @property
    def tags(self):
        """
        Gets the tags of this ExperimentInputExperiments.


        :return: The tags of this ExperimentInputExperiments.
        :rtype: list[TagRepository]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this ExperimentInputExperiments.


        :param tags: The tags of this ExperimentInputExperiments.
        :type: list[TagRepository]
        """

        self._tags = tags

    @property
    def settings(self):
        """
        Gets the settings of this ExperimentInputExperiments.


        :return: The settings of this ExperimentInputExperiments.
        :rtype: ExperimentInputSettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """
        Sets the settings of this ExperimentInputExperiments.


        :param settings: The settings of this ExperimentInputExperiments.
        :type: ExperimentInputSettings
        """

        self._settings = settings

    @property
    def training_references(self):
        """
        Gets the training_references of this ExperimentInputExperiments.


        :return: The training_references of this ExperimentInputExperiments.
        :rtype: list[TrainingReferenceExperiments]
        """
        return self._training_references

    @training_references.setter
    def training_references(self, training_references):
        """
        Sets the training_references of this ExperimentInputExperiments.


        :param training_references: The training_references of this ExperimentInputExperiments.
        :type: list[TrainingReferenceExperiments]
        """

        self._training_references = training_references

    @property
    def training_data_reference(self):
        """
        Gets the training_data_reference of this ExperimentInputExperiments.


        :return: The training_data_reference of this ExperimentInputExperiments.
        :rtype: ConnectionObjectSourceExperiments
        """
        return self._training_data_reference

    @training_data_reference.setter
    def training_data_reference(self, training_data_reference):
        """
        Sets the training_data_reference of this ExperimentInputExperiments.


        :param training_data_reference: The training_data_reference of this ExperimentInputExperiments.
        :type: ConnectionObjectSourceExperiments
        """

        self._training_data_reference = training_data_reference

    @property
    def training_results_reference(self):
        """
        Gets the training_results_reference of this ExperimentInputExperiments.
        This is required for DL

        :return: The training_results_reference of this ExperimentInputExperiments.
        :rtype: ConnectionObjectTargetExperiments
        """
        return self._training_results_reference

    @training_results_reference.setter
    def training_results_reference(self, training_results_reference):
        """
        Sets the training_results_reference of this ExperimentInputExperiments.
        This is required for DL

        :param training_results_reference: The training_results_reference of this ExperimentInputExperiments.
        :type: ConnectionObjectTargetExperiments
        """

        self._training_results_reference = training_results_reference

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
