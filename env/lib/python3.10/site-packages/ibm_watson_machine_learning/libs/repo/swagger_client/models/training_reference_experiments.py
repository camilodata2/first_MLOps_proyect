# coding: utf-8

#  -----------------------------------------------------------------------------------------
#  (C) Copyright IBM Corp. 2018- 2023.
#  https://opensource.org/licenses/BSD-3-Clause
#  -----------------------------------------------------------------------------------------

from pprint import pformat
from six import iteritems
import re


class TrainingReferenceExperiments(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, training_definition_url=None, command=None, hyper_parameters_optimization=None, compute_configuration=None, pretrained_model_url=None):
        """
        TrainingReferenceExperiments - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'training_definition_url': 'str',
            'command': 'str',
            'hyper_parameters_optimization': 'HyperParametersOptimizationExperiments',
            'compute_configuration': 'ComputeConfigurationExperiments',
            'pretrained_model_url': 'str'
        }

        self.attribute_map = {
            'name': 'name',
            'training_definition_url': 'training_definition_url',
            'command': 'command',
            'hyper_parameters_optimization': 'hyper_parameters_optimization',
            'compute_configuration': 'compute_configuration',
            'pretrained_model_url': 'pretrained_model_url'
        }

        self._name = name
        self._training_definition_url = training_definition_url
        self._command = command
        self._hyper_parameters_optimization = hyper_parameters_optimization
        self._compute_configuration = compute_configuration
        self._pretrained_model_url = pretrained_model_url

    @property
    def name(self):
        """
        Gets the name of this TrainingReferenceExperiments.


        :return: The name of this TrainingReferenceExperiments.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this TrainingReferenceExperiments.


        :param name: The name of this TrainingReferenceExperiments.
        :type: str
        """

        self._name = name

    @property
    def training_definition_url(self):
        """
        Gets the training_definition_url of this TrainingReferenceExperiments.


        :return: The training_definition_url of this TrainingReferenceExperiments.
        :rtype: str
        """
        return self._training_definition_url

    @training_definition_url.setter
    def training_definition_url(self, training_definition_url):
        """
        Sets the training_definition_url of this TrainingReferenceExperiments.


        :param training_definition_url: The training_definition_url of this TrainingReferenceExperiments.
        :type: str
        """

        self._training_definition_url = training_definition_url

    @property
    def command(self):
        """
        Gets the command of this TrainingReferenceExperiments.
        only required for DL - it is overwriting what we have in {baseUrl}/v3/ml_assets/training_definitions/{id}

        :return: The command of this TrainingReferenceExperiments.
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """
        Sets the command of this TrainingReferenceExperiments.
        only required for DL - it is overwriting what we have in {baseUrl}/v3/ml_assets/training_definitions/{id}

        :param command: The command of this TrainingReferenceExperiments.
        :type: str
        """

        self._command = command

    @property
    def hyper_parameters_optimization(self):
        """
        Gets the hyper_parameters_optimization of this TrainingReferenceExperiments.
        It is not used for model_definition

        :return: The hyper_parameters_optimization of this TrainingReferenceExperiments.
        :rtype: HyperParametersOptimizationExperiments
        """
        return self._hyper_parameters_optimization

    @hyper_parameters_optimization.setter
    def hyper_parameters_optimization(self, hyper_parameters_optimization):
        """
        Sets the hyper_parameters_optimization of this TrainingReferenceExperiments.
        It is not used for model_definition

        :param hyper_parameters_optimization: The hyper_parameters_optimization of this TrainingReferenceExperiments.
        :type: HyperParametersOptimizationExperiments
        """

        self._hyper_parameters_optimization = hyper_parameters_optimization

    @property
    def compute_configuration(self):
        """
        Gets the compute_configuration of this TrainingReferenceExperiments.


        :return: The compute_configuration of this TrainingReferenceExperiments.
        :rtype: ComputeConfigurationExperiments
        """
        return self._compute_configuration

    @compute_configuration.setter
    def compute_configuration(self, compute_configuration):
        """
        Sets the compute_configuration of this TrainingReferenceExperiments.


        :param compute_configuration: The compute_configuration of this TrainingReferenceExperiments.
        :type: ComputeConfigurationExperiments
        """

        self._compute_configuration = compute_configuration

    @property
    def pretrained_model_url(self):
        """
        Gets the pretrained_model_url of this TrainingReferenceExperiments.
        This is URL to the model which is stored in the repository service

        :return: The pretrained_model_url of this TrainingReferenceExperiments.
        :rtype: str
        """
        return self._pretrained_model_url

    @pretrained_model_url.setter
    def pretrained_model_url(self, pretrained_model_url):
        """
        Sets the pretrained_model_url of this TrainingReferenceExperiments.
        This is URL to the model which is stored in the repository service

        :param pretrained_model_url: The pretrained_model_url of this TrainingReferenceExperiments.
        :type: str
        """

        self._pretrained_model_url = pretrained_model_url

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
